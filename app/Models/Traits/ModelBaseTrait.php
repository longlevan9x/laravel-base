<?php
/**
 * Created by PhpStorm.
 * User: LongPC
 * Date: 07/29/2018
 * Time: 16:07
 */

namespace App\Models\Traits;

use App\Models\Setting;
use Illuminate\Support\Str;
use League\Flysystem\Exception;

/**
 * Trait ModelBaseTrait
 * @package App\Models\Traits
 */
trait ModelBaseTrait
{
	/**
	 * @param $key
	 * @param $value
	 * @return mixed
	 */
	public function __set($key, $value) {
		if ($this->isMethodMaxHeight($key)) {
			return $this->{$key} = $value;
		}

		if ($this->isMethodMaxWidth($key)) {
			return $this->{$key} = $value;
		}

		return parent::__set($key, $value); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $key
	 * @return mixed
	 */
	public function __get($key) {
		if ($this->isMethodMaxHeight($key)) {
			return $this->{$key};
		}

		if ($this->isMethodMaxWidth($key)) {
			return $this->{$key};
		}

		return parent::__get($key); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $method
	 * @param $parameters
	 * @return mixed
	 */
	public function __call($method, $parameters) {
		if ($this->isMethodSetMaxHeight($method)) {
			return $this->methodSetMaxWidthHeight($method, $parameters);
		}

		if ($this->isMethodSetMaxWidth($method)) {
			return $this->methodSetMaxWidthHeight($method, $parameters);
		}

		if ($this->isMethodGetMaxHeight($method)) {
			$this->{$method} = function($method) {
				$attribute = substr($method, strpos($method, 'get') + 3);
				$attribute = lcfirst($attribute);
				return $this->{$attribute};
			};
			return call_user_func_array($this->{$method}, [$method]);
		}

		if ($this->isMethodGetMaxWidth($method)) {
			$this->{$method} = function($method) {
				$attribute = substr($method, strpos($method, 'get') + 3);
				$attribute = lcfirst($attribute);
				return $this->{$attribute};
			};
			return call_user_func_array($this->{$method}, [$method]);
		}

		return parent::__call($method, $parameters); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodMaxWidth($method) {
		if (Str::startsWith($method, 'max') && Str::endsWith($method, 'Width') && strlen($method) > 7) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodMaxHeight($method) {
		if (Str::startsWith($method, 'max') && Str::endsWith($method, 'Height') && strlen($method) > 8) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodSetMaxWidth($method) {
		if (Str::startsWith($method, 'setMax') && Str::endsWith($method, 'Width') && strlen($method) > 10) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodSetMaxHeight($method) {
		if (Str::startsWith($method, 'setMax') && Str::endsWith($method, 'Height') && strlen($method) > 11) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodGetMaxWidth($method) {
		if (Str::startsWith($method, 'getMax') && Str::endsWith($method, 'Width') && strlen($method) > 10) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @return bool
	 */
	private function isMethodGetMaxHeight($method) {
		if (Str::startsWith($method, 'getMax') && Str::endsWith($method, 'Height') && strlen($method) > 11) {
			return true;
		}

		return false;
	}

	/**
	 * @param $method
	 * @param $parameters
	 * @return mixed
	 */
	private function methodSetMaxWidthHeight($method, $parameters) {
		$this->{$method} = function($method, $value) {
			$attribute = substr($method, strpos($method, 'set') + 3);
			$attribute = lcfirst($attribute);
			if (is_array($value) && count($value) == 1) {
				$value = $value[0];
			}
			else {
				throw new Exception("The method '$method'  takes only one argument.");
			}

			if (!is_numeric($value)) {
				throw new Exception("Value of method '$method' must be a number.");
			}

			return $this->{$attribute} = $value;
		};

		return call_user_func_array($this->{$method}, [$method, $parameters]);
	}
}